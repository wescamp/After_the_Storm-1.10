#textdomain wesnoth-After_the_Storm

#########################
# ARITHMETIC OPERATIONS #
#########################

# l_value = l_value + r_value;
#define VARIABLE_ADD VAR_ID RVALUE
    [set_variable]
        name={VAR_ID}
        add={RVALUE}
    [/set_variable]
#enddef
# l_value = l_value - r_value;
#define VARIABLE_MINUS VAR_ID RVALUE
    [set_variable]
        name={VAR_ID}
        sub={RVALUE}
    [/set_variable]
#enddef
# l_value = l_value * r_value;
#define VARIABLE_MULTIPLY VAR_ID RVALUE
    [set_variable]
        name={VAR_ID}
        multiply={RVALUE}
    [/set_variable]
#enddef
# l_value = l_value / r_value;
#define VARIABLE_DIVIDE VAR_ID RVALUE
    [set_variable]
        name={VAR_ID}
        divide={RVALUE}
    [/set_variable]
#enddef
# l_value = l_value % r_value;
#define VARIABLE_MODULO VAR_ID RVALUE
    [set_variable]
        name={VAR_ID}
        modulo={RVALUE}
    [/set_variable]
#enddef

# Short aliases of primitives
#define VARIABLE_MIN VAR_ID RVALUE
    {VARIABLE_MINUS {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_MUL VAR_ID RVALUE
    {VARIABLE_MULTIPLY {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_DIV VAR_ID RVALUE
    {VARIABLE_DIVIDE {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_MOD VAR_ID RVALUE
    {VARIABLE_MODULO {VAR_ID} {RVALUE} }
#enddef

# l_value = -l_value;
#define VARIABLE_NEG VAR_ID
    [set_variable]
        name={VAR_ID}
        multiply=-1
    [/set_variable]
#enddef
# ++l_value;
#define VARIABLE_INC VAR_ID
    [set_variable]
        name={VAR_ID}
        add=1
    [/set_variable]
#enddef
# --l_value;
#define VARIABLE_DEC VAR_ID
    [set_variable]
        name={VAR_ID}
        sub=1
    [/set_variable]
#enddef

#########################
# COMPARISON OPERATIONS #
#########################

# ( l_value == r_value )
#define VARIABLE_NUMERICAL_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        numerical_equals={RVALUE}
    [/variable]
#enddef

# ( l_value != r_value )
#define VARIABLE_NUMERICAL_NOT_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        numerical_not_equals={RVALUE}
    [/variable]
#enddef

# ( l_value < r_value )
#define VARIABLE_NUMERICAL_LESS_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        less_than={RVALUE}
    [/variable]
#enddef

# ( l_value > r_value )
#define VARIABLE_NUMERICAL_GREATER_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        greater_than={RVALUE}
    [/variable]
#enddef

# ( l_value <= r_value )
#define VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        less_than_equal_to={RVALUE}
    [/variable]
#enddef

# ( l_value >= r_value )
#define VARIABLE_NUMERICAL_GREATER_THAN_OR_EQUAL VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        greater_than_equal_to={RVALUE}
    [/variable]
#enddef

# ( l_value >= left_r_value && l_value <= right_r_value )
#define VARIABLE_NUMERICAL_IN_RANGE VAR_ID LEFT RIGHT
    [variable]
        name={VAR_ID}
        greater_than_equal_to={LEFT}
    [/variable]
    [variable]
        name={VAR_ID}
        less_than_equal_to={RIGHT}
    [/variable]
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
