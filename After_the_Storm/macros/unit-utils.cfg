#textdomain wesnoth-After_the_Storm

#define NO_UPKEEP_NO_OVERLAY
    [+unit]
        # dammit, esr
        upkeep=loyal
    [/unit]
#enddef

#define PETRIFIED
    [+unit]
        [status]
            petrified=yes
        [/status]
    [/unit]
#enddef

#define GENDER _GENDER
    [+unit]
        gender={_GENDER}
    [/unit]
#enddef

#define PALETTE _SRC _DEST
    [+unit]
        [+modifications]
            [object]
                [effect]
                    apply_to="image_mod"
                    add="PAL("+{_SRC}+">"+{_DEST}+")"
                [/effect]
            [/object]
        [/modifications]
    [/unit]
#enddef

#define DOOR_TILES_TO_UNITS _DOOR_OWNER_SIDE
    [setup_doors]
        side={_DOOR_OWNER_SIDE}
    [/setup_doors]
#enddef

#define IS_VILLAGE_CONTROL_DUMMY
    canrecruit=yes
    type=Invisible Dummy
    name=" " # wmllint:ignore
    random_traits,generate_name,random_gender=no,no,no
#enddef

#define FAKE_RECRUIT _SIDE _TYPE _X _Y
    {VARIABLE_OP temp_FAKE_RECRUIT_facing rand n,ne,se,s,sw,nw}

    [unit]
        side={_SIDE}
        type={_TYPE}
        x={_X}
        y={_Y}
        random_gender=yes
        random_traits=yes
        generate_name=yes
        moves=0
        attacks_left=0
        animate=yes
        facing=$temp_FAKE_RECRUIT_facing
    [/unit]

    {CLEAR_VARIABLE temp_FAKE_RECRUIT_facing}
#enddef

#define UNIT_PALETTE_SWITCH _SUF _FROM _TO
    [object]
        silent=yes
        [filter]
            {_SUF}
        [/filter]
        [effect]
            apply_to=image_mod
            add="PAL("+{_FROM}+">"+{_TO}+")"
        [/effect]
    [/object]
#enddef

#define MOBILIZE_GUARDIANS _SUF
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_MOBILIZE_GUARDIANS_store
    [/store_unit]

    {FOREACH temp_MOBILIZE_GUARDIANS_store temp_MOBILIZE_GUARDIANS_i}
        {CLEAR_VARIABLE "temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i].status.guardian,temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i].ai_special"}
        [unstore_unit]
            variable="temp_MOBILIZE_GUARDIANS_store[$temp_MOBILIZE_GUARDIANS_i]"
            find_vacant=no
        [/unstore_unit]
    {NEXT temp_MOBILIZE_GUARDIANS_i}

    {CLEAR_VARIABLE "temp_MOBILIZE_GUARDIANS_store"}
#enddef

#define UNKILLABLE_UNIT _SUF
    [event]
        name=last breath
        first_time_only=no
        [filter]
            {_SUF}
        [/filter]

        {VARIABLE unit.hitpoints $unit.max_hitpoints}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]
    [/event]
#enddef

#define NO_EXPERIENCE_UNIT
    # The XP bar won't appear without any advancements.
    # experience=25
    # {AMLA_DEFAULT}
    # advances_to=null
    experience=1000
#enddef

# For use with MOVE_UNIT
#define IGNORE_MOVEMENT_COSTS
    [+move_unit]
        check_passability=no
    [/move_unit]
#enddef

#define INJURED_VARIATION_STATS
    hitpoints=1
    max_hitpoints=1
    experience=0
    max_experience=0
    moves=0
    max_attacks=0
    attacks_left=0
#enddef

#define APPLY_INJURED_VARIATION _SUF _FACING
    [object]
        [filter]
            {_SUF}
        [/filter]
        [effect]
            apply_to=variation
            name=injured
        [/effect]
        silent=yes
    [/object]

    [modify_unit]
        [filter]
            {_SUF}
        [/filter]
        {INJURED_VARIATION_STATS}
        facing={_FACING}
        [status]
            slowed=no
            poisoned=no
            petrified=no
            unhealable=no
        [/status]
    [/modify_unit]
#enddef

# Resets one or more on-map units to their default statuses (including
# maximum HP, MP, and attacks.
#define RESET_UNIT_STATUSES _SUF
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_RESET_UNIT_STATUS_store
    [/store_unit]

    {FOREACH temp_RESET_UNIT_STATUS_store temp_RESET_UNIT_STATUS_k}
        # Use a pseudoreference so this doesn't become illegibly long.
        {VARIABLE temp_RESET_UNIT_STATUS_u "temp_RESET_UNIT_STATUS_store[$temp_RESET_UNIT_STATUS_k]"}

        {CLEAR_VARIABLE $temp_RESET_UNIT_STATUS_u|.status.uncovered}
        {CLEAR_VARIABLE $temp_RESET_UNIT_STATUS_u|.status.poisoned}
        {CLEAR_VARIABLE $temp_RESET_UNIT_STATUS_u|.status.slowed}
        {CLEAR_VARIABLE $temp_RESET_UNIT_STATUS_u|.status.petrified}

        [set_variables]
            name=$temp_RESET_UNIT_STATUS_u
            mode=merge
            [value]
                hitpoints=$$temp_RESET_UNIT_STATUS_u|.max_hitpoints
                moves=$$temp_RESET_UNIT_STATUS_u|.max_moves
                attacks_left=$$temp_RESET_UNIT_STATUS_u|.max_attacks
            [/value]
        [/set_variables]

        [unstore_unit]
            variable=$temp_RESET_UNIT_STATUS_u
            find_vacant=no
        [/unstore_unit]
    {NEXT temp_RESET_UNIT_STATUS_k}

    {CLEAR_VARIABLE temp_RESET_UNIT_STATUS_store,temp_RESET_UNIT_STATUS_u}
#enddef

# An alternative to the mainline PUT_TO_RECALL_LIST macro that actually resets
# the affected units' stats before storing in the recall list so they don't
# appear funny the next time they are recalled by the player.
#define RESET_AND_SEND_TO_RECALL_LIST _SUF
    [store_unit]
        [filter]
            {_SUF}
        [/filter]
        variable=temp_RESET_AND_SEND_TO_RECALL_LIST_store
        kill=yes
    [/store_unit]

    {FOREACH temp_RESET_AND_SEND_TO_RECALL_LIST_store temp_RESET_AND_SEND_TO_RECALL_LIST_k}
        # Use a pseudoreference so this doesn't become illegibly long.
        {VARIABLE temp_RESET_AND_SEND_TO_RECALL_LIST_var "temp_RESET_AND_SEND_TO_RECALL_LIST_store[$temp_RESET_AND_SEND_TO_RECALL_LIST_k]"}

        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.uncovered}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.poisoned}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.slowed}
        {CLEAR_VARIABLE $temp_RESET_AND_SEND_TO_RECALL_LIST_var|.status.petrified}

        [set_variables]
            name=$temp_RESET_AND_SEND_TO_RECALL_LIST_var
            mode=merge
            [value]
                hitpoints=$$temp_RESET_AND_SEND_TO_RECALL_LIST_var|.max_hitpoints
                moves=0
                attacks_left=0
            [/value]
        [/set_variables]

        [unstore_unit]
            find_vacant=no
            variable=$temp_RESET_AND_SEND_TO_RECALL_LIST_var
            x,y=recall,recall
        [/unstore_unit]
    {NEXT temp_RESET_AND_SEND_TO_RECALL_LIST_k}

    {CLEAR_VARIABLE temp_RESET_AND_SEND_TO_RECALL_LIST_store,temp_RESET_AND_SEND_TO_RECALL_LIST_var}
#enddef

#
# Disallow a unit (slave) from moving when it gets away from another unit's
# (master) movement range.
#
# 1. We set the slave's remaining MP to 0 on each turn refresh unless it is
#    within range of its master.
#
# 2. We set the slave's remaining MP to 0 on moveto whenever it leaves its
#    master's range. We don't care how far away from its master's range it can
#    move. This can happen because of either the master or the slave moving.
#
# 3. On each case above, we store the slave's previous remaining MP in a unit
#    variable so we can restore them once the master moves so that the slave
#    is within his movement range again.
#
# 4. Handling the master or the slave's death is left as an exercise to the
#    reader.
#
# 5. Handling masters and slaves who do not belong to the same side is also
#    left as an exercise to the reader.
#
# 6. Allowing this macro to be used multiple times in a scenario is also left
#    as an exercise to the reader.
#
# Also note that this macro could be alternatively called SLAVE_UNIT. Not that
# there's anything wrong with that.(tm)
#
#define BIND_UNIT_TO_UNIT_MOVEMENT_RANGE _MASTER_SUF _SLAVE_SUF
    [event]
        id=bind_uu_immobilize_helper_eh # (3a)
        name=immobilize bound unit
        first_time_only=no

        {LOG_ATS_DBG "UU: $unit.id has been immobilized ($unit.moves| MP)"}

        {VARIABLE unit.variables.uu_moves $unit.moves}

        # Default attribute values since the 1.9.0 config optimizations are
        # undocumented and thus unreliable, so set an explicit flag to check
        # for.
        {VARIABLE unit.variables.uu_immobilized yes}

        {VARIABLE unit.moves 0}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]

        [redraw]
            side=$unit.side
        [/redraw]
    [/event]

    [event]
        id=bind_uu_mobilize_helper_eh # (3b)
        name=mobilize bound unit
        first_time_only=no

        {LOG_ATS_DBG "UU: $unit.id has been mobilized ($unit.variables.uu_moves| MP)"}

        {VARIABLE unit.moves $unit.variables.uu_moves}

        {CLEAR_VARIABLE unit.variables.uu_moves,unit.variables.uu_immobilized}

        [unstore_unit]
            variable=unit
            find_vacant=no
        [/unstore_unit]

        [redraw]
            side=$unit.side
        [/redraw]
    [/event]

    [event]
        id=bind_uu_turn_refresh_eh # (1)
        name=turn refresh
        first_time_only=no
        [filter_side]
            [has_unit]
                {_SLAVE_SUF}
                [or]
                    {_MASTER_SUF}
                [/or]
            [/has_unit]
        [/filter_side]

        {LOG_ATS_DBG "UU: in turn refresh handler"}

        [check_unit_in_range]
            [filter]
                {_MASTER_SUF}
            [/filter]
            [filter_second]
                {_SLAVE_SUF}
            [/filter_second]
            variable=temp_bind_uu_in_range
        [/check_unit_in_range]

        [if]
            {VARIABLE_BOOLEAN_EQUALS temp_bind_uu_in_range no}
            [then]
                [fire_event]
                    name=immobilize bound unit
                    [primary_unit]
                        {_SLAVE_SUF}
                    [/primary_unit]
                [/fire_event]
            [/then]
            [else]
                [store_unit]
                    [filter]
                        {_SLAVE_SUF}
                    [/filter]
                    variable=temp_bind_uu_slave
                [/store_unit]

                # We only need to clear state here, since the game's internal
                # pre-turn refresh logic already reset the unit's MP.
                {CLEAR_VARIABLE temp_bind_uu_slave.variables.uu_moves,temp_bind_uu_slave.variables.uu_immobilized}

                [unstore_unit]
                    variable=temp_bind_uu_slave
                    find_vacant=no
                [/unstore_unit]

                {CLEAR_VARIABLE temp_bind_uu_slave}
            [/else]
        [/if]

        {CLEAR_VARIABLE temp_bind_uu_in_range}
    [/event]

    [event]
        id=bind_uu_moveto_eh # (2)
        name=moveto
        first_time_only=no
        [filter]
            {_SLAVE_SUF}
            [or]
                {_MASTER_SUF}
            [/or]
        [/filter]

        {LOG_ATS_DBG "UU: in moveto handler"}

        [check_unit_in_range]
            [filter]
                {_MASTER_SUF}
            [/filter]
            [filter_second]
                {_SLAVE_SUF}
            [/filter_second]
            variable=temp_bind_uu_in_range
        [/check_unit_in_range]

        [if]
            {VARIABLE_BOOLEAN_EQUALS temp_bind_uu_in_range no}
            [then] # Not within master's range.
                [if]
                    [have_unit]
                        {_SLAVE_SUF}
                        [not]
                            [filter_wml]
                                [variables]
                                    uu_immobilized=yes
                                [/variables]
                            [/filter_wml]
                        [/not]
                    [/have_unit]
                    [then]
                        # Wasn't immobilized before, needs to be immobilized now.
                        [fire_event]
                            name=immobilize bound unit
                            [primary_unit]
                                {_SLAVE_SUF}
                            [/primary_unit]
                        [/fire_event]
                    [/then]
                    [else]
                        # Slave state won't be changed by this move, allow
                        # undoing.
                        [allow_undo][/allow_undo]
                    [/else]
                [/if]
            [/then]
            [else] # Now within master's range.
                [if]
                    [have_unit]
                        {_SLAVE_SUF}
                        [filter_wml]
                            [variables]
                                uu_immobilized=yes
                            [/variables]
                        [/filter_wml]
                    [/have_unit]
                    [then]
                        # Was immobilized before, restore MP and clear state.
                        [fire_event]
                            name=mobilize bound unit
                            [primary_unit]
                                {_SLAVE_SUF}
                            [/primary_unit]
                        [/fire_event]
                    [/then]
                    [else]
                        # Slave state won't be changed by this move, allow
                        # undoing.
                        [allow_undo][/allow_undo]
                    [/else]
                [/if]
            [/else]
        [/if]

        {CLEAR_VARIABLE temp_bind_uu_in_range}
    [/event]
#enddef

#define FORCE_MOBILIZE_BOUND_UNIT _SLAVE_SUF
    [if]
        [have_unit]
            {_SLAVE_SUF}
            [filter_wml]
                [variables]
                    uu_immobilized=yes
                [/variables]
            [/filter_wml]
        [/have_unit]
        [then]
            [fire_event]
                name=mobilize bound unit
                [primary_unit]
                    {_SLAVE_SUF}
                [/primary_unit]
            [/fire_event]
        [/then]
    [/if]
#enddef

#define DISABLE_BOUND_UNITS
    # First, mobilize any applicable still bound units.

    [store_unit]
        [filter]
            [filter_wml]
                [variables]
                    uu_immobilized=yes
                [/variables]
            [/filter_wml]
        [/filter]
        variable=temp_uuu_immobilized_units
        kill=no
    [/store_unit]

    {FOREACH temp_uuu_immobilized_units temp_uuu_k}
        [fire_event]
            name=mobilize bound unit
            [primary_unit]
                x=$temp_uuu_immobilized_units[$temp_uuu_k].x
                y=$temp_uuu_immobilized_units[$temp_uuu_k].y
            [/primary_unit]
        [/fire_event]
    {NEXT temp_uuu_k}

    {CLEAR_VARIABLE temp_uuu_immobilized_units}

    # With that out of the way, we can eliminate all the event handlers
    # previously involved.

    [event]
        id=bind_uu_immobilize_helper_eh
        remove=yes
    [/event]

    [event]
        id=bind_uu_mobilize_helper_eh
        remove=yes
    [/event]

    [event]
        id=bind_uu_turn_refresh_eh
        remove=yes
    [/event]

    [event]
        id=bind_uu_moveto_eh
        remove=yes
    [/event]
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
