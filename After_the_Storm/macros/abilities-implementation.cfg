#textdomain wesnoth-After_the_Storm

#
# Implementation of event-based unit abilities.
#

#define ABILITY_PHYSICAL_ENDURANCE_AUXILIARY_EVENTS
    [event]
        id=ability_physical_endurance_attacker_hits
        name=attacker hits
        first_time_only=no
        [filter_second]
            ability=physical_endurance
        [/filter_second]
        [filter_attack]
            [not]
                type=arcane
            [/not]
        [/filter_attack]

        [fire_event]
            name=physical endurance handler
            [primary_unit]
                x,y=$x2,$y2
            [/primary_unit]
            [secondary_unit]
                x,y=$x1,$y1
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        id=ability_physical_endurance_defender_hits
        name=defender hits
        first_time_only=no
        [filter]
            ability=physical_endurance
        [/filter]
        [filter_second_attack]
            [not]
                type=arcane
            [/not]
        [/filter_second_attack]

        [fire_event]
            name=physical endurance handler
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
            [secondary_unit]
                x,y=$x2,$y2
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        id=ability_physical_endurance_handler
        name=physical endurance handler
        first_time_only=no

        # Primary unit: physical endurance user
        # Secondary unit: attacker/defender

        [if]
            {VARIABLE_NUMERICAL_GREATER_THAN unit.hitpoints 0}
            [then]
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp to_variable damage_inflicted}
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp divide      2}
                {VARIABLE_OP temp_PHYSICAL_ENDURANCE_restore_hp round       ceil}

                [heal_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    amount=$temp_PHYSICAL_ENDURANCE_restore_hp
                [/heal_unit]

                [floating_text]
                    x,y=$x1,$y1
                    text="<span color='green'>$heal_amount</span>" # wmllint: ignore
                [/floating_text]

                {CLEAR_VARIABLE temp_PHYSICAL_ENDURANCE_restore_hp}
            [/then]
        [/if]
    [/event]
#enddef

# Macro used to implement ABILITY_DEMOLITION_AUXILIARY_EVENT
# and some scenario-specific events.
#
# NOTE: if _ADDITIONAL_LOCATION_FILTER contains terrain=, it must be under an
# [and], [or], or [not] block; otherwise, it will cause problems.
#define ABILITY_DEMOLITION_AUXILIARY_EVENT_DESTRUCTION_IMPLEMENTATION _X _Y _ADDITIONAL_LOCATION_FILTER
    [color_adjust]
        red,green,blue=300,300,300
    [/color_adjust]

    [remove_terrain_overlays]
        x={_X}
        y={_Y}
        radius=1
        {_ADDITIONAL_LOCATION_FILTER}
    [/remove_terrain_overlays]

    [terrain]
        x={_X}
        y={_Y}
        radius=1
        [and]
            terrain=A*,C*,D*,G*,K*,R*,U*
        [/and]
        {_ADDITIONAL_LOCATION_FILTER}
        terrain=Re^Es
    [/terrain]

    [harm_unit]
        [filter]
            [filter_location]
                [filter_adjacent_location]
                    x={_X}
                    y={_Y}
                [/filter_adjacent_location]
            [/filter_location]
        [/filter]

        # No harm source unit or weapon given here, on purpose.

        delay=0
        amount=$this_unit.hitpoints
        # No animations played at this point, since they'd delay the sequence too much
        # in the worst case (six adjacent units)
        animate=no
        kill=no
        fire_event=yes
    [/harm_unit]

    {QUAKE "explosion-big.ogg"}

    [redraw][/redraw] # update terrain display

    [color_adjust]
        red,green,blue=0,0,0
    [/color_adjust]

    # Kill all adjacent units that don't have the demolition ability first;
    # we need to take care of those in a separate step to prevent causing
    # an event loop.

    [kill]
        [filter_location]
            [filter_adjacent_location]
                x={_X}
                y={_Y}
            [/filter_adjacent_location]
        [/filter_location]
        [not]
            ability=demolition
        [/not]
        [not]
            # Shapeshifters are handled by scenario-specific
            # events where they appear, and it might not be
            # a good idea for those to fire at this point.
            [filter_wml]
                [variables]
                    is_shapeshifter=yes
                [/variables]
            [/filter_wml]
        [/not]
        [secondary_unit]
            # the demolition unit killed them
            x={_X}
            y={_Y}
        [/secondary_unit]
        animate=yes
        fire_event=yes
    [/kill]

    # Remove this source unit so the target units with demolition don't
    # trigger its death again.

    [kill]
        x={_X}
        y={_Y}
        animate=no
        fire_event=no
    [/kill]

    # Take care of any remaining adjacent units with demolition.

    [kill]
        [filter_location] # SLF, since there's no unit at (_X, _Y) anymore.
            [filter_adjacent_location]
                x={_X}
                y={_Y}
            [/filter_adjacent_location]
        [/filter_location]
        ability=demolition
        # No secondary unit, but we shouldn't need one in this case.
        animate=yes
        fire_event=yes
    [/kill]
#enddef

#define ABILITY_DEMOLITION_AUXILIARY_EVENT
    [event]
        id=ability_demolition_die
        name=die
        first_time_only=no
        [filter]
            ability=demolition
        [/filter]

        {ABILITY_DEMOLITION_AUXILIARY_EVENT_DESTRUCTION_IMPLEMENTATION $x1 $y1 ()}
    [/event]
#enddef

#
# Base ability implementation for all aspect Guardians.
#

# wmllint: unbalanced-on
#define ABILITY_ASPECT_GUARDIAN_BASE
    #
    # Regeneration
    #
    [regenerate]
        value=8
        id=aspect_guardian_regenerates
        affect_self=yes
        poison=cured
    [/regenerate]

    #
    # Immortality
    #
    [dummy]
        id=aspect_guardian_immortality
    [/dummy]

    # wmlxgettext: [abilities]
[/abilities]

[event]
    id=aspect_guardian_immortality_implementation
    name=last breath
    first_time_only=no
    [filter]
        ability=aspect_guardian_immortality
    [/filter]
    [filter_second]
        [not]
            ability=aspect_guardian_immortality
        [/not]
        [not]
            ability=aspect_destroyer
        [/not]
    [/filter_second]

    {VARIABLE unit.hitpoints 1}

    # Deduct the killing XP from the attacker, otherwise it is possible
    # for them to advance very quickly from L1 to their maximum advancement.
    # Things get even messier once the full health AMLA effect kicks in.

    {LOG_ATS_DBG "aspect_guardian_immortality_implementation: triggered, deducting $(max([4, 8 * $unit.level])) XP from $second_unit.id"}

    {VARIABLE_MIN second_unit.experience "$(max([4, 8 * $unit.level]))"}

    [unstore_unit]
        variable=unit
        find_vacant=no
    [/unstore_unit]

    [unstore_unit]
        variable=second_unit
        find_vacant=no
    [/unstore_unit]
[/event]

[event]
    id=aspect_guardian_no_combat_experience_on_attack_implementation
    name=attack end
    first_time_only=no
    [filter_second]
        ability=aspect_guardian_immortality
    [/filter_second]

    [if]
        # Let the last breath event handle things if the target is dying.
        {VARIABLE_NUMERICAL_GREATER_THAN second_unit.hitpoints 0}
        [then]
            {LOG_ATS_DBG "aspect_guardian_no_combat_experience_on_attack_implementation: triggered, deducting $second_unit.level XP from $unit.id"}

            # Deduct the combat XP from the attacker.
            {VARIABLE_MIN unit.experience "$second_unit.level"}

            [unstore_unit]
                variable=unit
                find_vacant=no
            [/unstore_unit]
        [/then]
    [/if]
[/event]

[event]
    id=aspect_guardian_no_combat_experience_on_defense_implementation
    name=attack end
    first_time_only=no
    [filter]
        ability=aspect_guardian_immortality
    [/filter]

    [if]
        # Let the last breath event handle things if the target is dying.
        {VARIABLE_NUMERICAL_GREATER_THAN unit.hitpoints 0}
        [then]
            {LOG_ATS_DBG "aspect_guardian_no_combat_experience_on_defense_implementation: triggered, deducting $unit.level XP from $second_unit.id"}

            # Deduct the combat XP from the attacker.
            {VARIABLE_MIN second_unit.experience "$unit.level"}

            [unstore_unit]
                variable=second_unit
                find_vacant=no
            [/unstore_unit]
        [/then]
    [/if]
[/event]

[+abilities]
    # wmlxgettext: [/abilities]
#enddef
# wmllint: unbalanced-off

# kate: indent-mode normal; encoding utf-8; space-indent on;
