#textdomain wesnoth-After_the_Storm

#define VARIABLE_FROM_STRLEN VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} string_length {RVALUE} }
#enddef
#define VARIABLE_RANDOM VAR_ID RVALUE
    {VARIABLE_OP ({VAR_ID}) rand ({RVALUE}) }
#enddef
#define VARIABLE_CONDITIONAL VAR_ID COND
    [set_conditional_variable]
        name={VAR_ID}
        [condition]
            {COND}
        [/condition]
    [/set_conditional_variable]
#enddef

#define VARIABLE_LEXICAL_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        equals={RVALUE}
    [/variable]
#enddef

#define VARIABLE_LEXICAL_NOT_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        not_equals={RVALUE}
    [/variable]
#enddef

# Requires Wesnoth 1.3.10
#define VARIABLE_LEXICAL_CONTAINS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        contains={RVALUE}
    [/variable]
#enddef

# Requires Wesnoth 1.3.2
#define VARIABLE_BOOLEAN_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        boolean_equals={RVALUE}
    [/variable]
#enddef

# Requires Wesnoth 1.5.0+svn
#define VARIABLE_BOOLEAN_NOT_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        boolean_not_equals={RVALUE}
    [/variable]
#enddef

#define BREAK VAR
    # Macro to break out of a FOREACH loop.
    # NOTE: the number used here is meant to be greater than or equa
    # to game_config::max_loop!
    {VARIABLE {VAR} 99999}
#enddef

# wmllint: unbalanced-on

# wmlindent: start ignoring
#define REVERSE_FOREACH ARRAY_VALUE VAR
    # Macro to begin a WML clause that iterates over an array in reverse.
    {VARIABLE {VAR} "$(${ARRAY_VALUE}.length - 1)"}
    [while]
        [variable]
            name={VAR}
            greater_than_equal_to=0
        [/variable]
        [do]
#enddef

#define REVERSE_NEXT VAR
    # Macro to end a WML clause that iterates over an array in reverse.
            [set_variable]
                name={VAR}
                sub=1
            [/set_variable]
        [/do]
    [/while]
    {CLEAR_VARIABLE {VAR}}
#enddef
# wmlindent: stop ignoring

#define REVERSE_BREAK VAR
    # Macro to break out of a REVERSE_FOREACH loop.
    {VARIABLE {VAR} -1}
#enddef

# wmlindent: start ignoring
#define FOR VAR INITIAL LAST
    {VARIABLE {VAR} {INITIAL} }
    [while]
        [variable]
            name={VAR}
            numerical_not_equals="$(1 + "+{LAST}+")"
        [/variable]
        [do]
#enddef
# wmlindent: stop ignoring

# wmllint: unbalanced-off

# wmlindent: opener "{REVERSE_FOREACH "
# wmlindent: opener "{FOR "
# wmlindent: closer "{REVERSE_NEXT "

# NOTE: there's apparently a problem with subnamespaces creating an
# empty [variables] node that causes crashes or memory corruption
# when writing or reading variables in some systems; this is why
# we use "Project_Y_After_the_Storm" as namespace instead of
# "Project_Y.After_the_Storm" here.
#define ATS_GLOBAL_VAR_NAMESPACE
    namespace="Project_Y_After_the_Storm"
#enddef

#define SET_GLOBAL TO_VAR_ID FROM_VAR_ID
    [set_global_variable]
        {ATS_GLOBAL_VAR_NAMESPACE}
        to_global={TO_VAR_ID}
        from_local={FROM_VAR_ID}
        immediate=yes
    [/set_global_variable]
#enddef

#define GET_GLOBAL FROM_VAR_ID TO_VAR_ID
    [get_global_variable]
        {ATS_GLOBAL_VAR_NAMESPACE}
        from_global={FROM_VAR_ID}
        to_local={TO_VAR_ID}
    [/get_global_variable]
#enddef

#define CLEAR_GLOBAL VAR_ID
    [clear_global_variable]
        {ATS_GLOBAL_VAR_NAMESPACE}
        global={VAR_ID}
        immediate=yes
    [/clear_global_variable]
#enddef

# kate: indent-mode normal; encoding utf-8; space-indent on;
